<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>echarts-demo</title>
    <script src="https://www.zhenglinglu.cn/zllstaticfile/echarts/vue.min.js"></script>
    <script src="https://www.zhenglinglu.cn/zllstaticfile/echarts/echarts.min.js"></script>
    <style>
        html,
        body,
        #main,
        .charts {
            padding: 0px;
            margin: 0px;
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <div id="main">
        <div ref="dom" class="charts"></div>
    </div>
    <script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        new Vue({
            el: '#main',
            data: {
                dom: null
            },
            mounted() {
                this.$nextTick(() => {
                    let init = this.$refs.dom, _this = this;
                    this.dom = echarts.init(init);
                    this.dom.showLoading();//显示loading
                    // 模拟后端返回的数据
                    let data = {
                        xAxis: ['周一', '周二', '周三', '周四', '周五', '周六', '周日'],
                        series: [
                            {
                                name: '邮件营销',
                                data: [120, 132, 101, 134, 90, 230, 210]
                            },
                            {
                                name: '联盟广告',
                                data: [220, 182, 191, 234, 290, 330, 310]
                            },
                            {
                                name: '视频广告',
                                data: [150, 232, 201, 154, 190, 330, 410]
                            },
                            {
                                name: '直接访问',
                                data: [320, 332, 301, 334, 390, 330, 320]
                            },
                            {
                                name: '搜索引擎',
                                data: [820, 932, 901, 934, 1290, 1330, 1320]
                            }
                        ]
                    };

                    //根据自己的业务需求进行相应的数据处理 例如区域块、坐标系等样式 
                    data.series.forEach(item => {
                        item.type = 'line';
                        item.stack = '总量';
                        item.areaStyle = {};
                    });
                    data.legend = data.legend ? data.legend : {
                        top:'8%'
                    }
                    //初始化
                    let option = {
                        title: {
                            // text: '堆叠区域图'
                        },
                        tooltip: {
                            trigger: 'axis',
                            axisPointer: {
                                type: 'cross',
                                label: {
                                    backgroundColor: '#6a7985'
                                }
                            }
                        },
                        legend: data.legend ,
                        toolbox: {
                            show: true,
                            feature: {
                                dataZoom: {
                                    yAxisIndex: 'none'
                                },
                                dataView: { readOnly: false },
                                magicType: { type: ['line', 'bar'] },
                                restore: {},
                                saveAsImage: {}
                            }
                        },
                        grid: {
                            top:'20%',
                            left: '3%',
                            right: '4%',
                            bottom: '3%',
                            containLabel: true
                        },
                        xAxis: [
                            {
                                type: 'category',
                                boundaryGap: false,
                                data: data.xAxis
                            }
                        ],
                        yAxis: [
                            {
                                type: 'value'
                            }
                        ],
                        series: data.series
                    };


                    this.dom.setOption(option);
                    this.dom.hideLoading();
                    window.onresize = function () {
                        _this.dom.resize({
                            width: init.innerWidth,
                            height: init.innerHeight
                        });
                    };
                })
            },
        })
    </script>
</body>

</html>